"""
Uyku Modu Y√∂netimi Servisi
Makine oturum durumuna g√∂re uyku moduna ge√ßi≈ü ve enerji tasarrufu
"""

import time
import threading
from datetime import datetime, timedelta
from typing import Optional
from ...utils.logger import log_system, log_oturum, log_warning, log_success
from ...utils.terminal import ok, warn, step, info


class UykuModuServisi:
    """Makine uyku modu y√∂netimi"""
    
    def __init__(self):
        self.uyku_modu_aktif = False
        self.son_aktivite_zamani = datetime.now()
        self.uyku_baslangic_zamani = None  # Uyku moduna ge√ßi≈ü zamanƒ±
        self.uyku_suresi_dakika = 3  # 15 dakika sonra uyku modu
        self.uyku_thread = None
        self.uyku_thread_aktif = False
        self.sistem_referans = None
        
        # Uyku modu istatistikleri
        self.uyku_modu_sayisi = 0
        self.toplam_uyku_suresi = 0
        self.enerji_tasarrufu_kwh = 0.0
        
        # Uyku modu mesajlarƒ±
        self.uyku_mesajlari = [
            "üí§ Uyku modu aktif - Enerji t√ºketimi minimuma d√º≈ü√ºr√ºld√º",
            "üîã Motorlar g√º√ß tasarrufu modunda - ƒ∞≈ülem bekliyor",
            "‚ö° LED'ler dim edildi - G√∂rsel uyarƒ±lar pasif",
            "üåô Sens√∂rler d√º≈ü√ºk g√º√ß modunda - Temel izleme aktif",
            "üí° Sistem hazƒ±r durumda - Oturum ba≈ülatƒ±lmasƒ± bekleniyor",
            "üîå AC motorlar g√ºvenli modda - Bekleme konumunda",
            "üìä Sistem performansƒ± optimize edildi - Kaynak kullanƒ±mƒ± azaltƒ±ldƒ±",
            "üõ°Ô∏è G√ºvenlik sistemleri aktif - Kritik fonksiyonlar korunuyor"
        ]
        
        self.uyku_cikis_mesajlari = [
            "üåÖ Uyku modundan √ßƒ±kƒ±lƒ±yor - Sistem aktifle≈ütiriliyor",
            "‚ö° Enerji seviyeleri normale d√∂nd√ºr√ºl√ºyor",
            "üîß Motorlar hazƒ±rlƒ±k moduna ge√ßiyor",
            "üí° LED'ler tam parlaklƒ±ƒüa ayarlanƒ±yor",
            "üì° Sens√∂rler tam g√º√ß modunda aktifle≈ütiriliyor",
            "üéØ Sistem operasyonel duruma ge√ßiyor",
            "‚úÖ T√ºm bile≈üenler hazƒ±r - Oturum ba≈ülatƒ±labilir"
        ]
    
    def sistem_referans_ayarla(self, sistem_ref):
        """Sistem referansƒ±nƒ± ayarla"""
        self.sistem_referans = sistem_ref
        info("UYKU", "Sistem referansƒ± ayarlandƒ±")
        log_system("Uyku modu servisi sistem referansƒ± ile baƒülandƒ±")
    
    def aktivite_kaydet(self):
        """Son aktivite zamanƒ±nƒ± g√ºncelle"""
        self.son_aktivite_zamani = datetime.now()
        
        # Eƒüer uyku modundaysa √ßƒ±k
        if self.uyku_modu_aktif:
            self.uyku_modundan_cik()
    
    def uyku_kontrol_baslat(self):
        """Uyku kontrol thread'ini ba≈ülat"""
        if self.uyku_thread_aktif:
            warn("UYKU", "Uyku kontrol thread'i zaten √ßalƒ±≈üƒ±yor")
            return
        
        self.uyku_thread_aktif = True
        self.uyku_thread = threading.Thread(target=self._uyku_kontrol_dongusu, daemon=True)
        self.uyku_thread.start()
        
        ok("UYKU", "Uyku kontrol sistemi ba≈ülatƒ±ldƒ±")
        log_system("Uyku modu kontrol sistemi ba≈ülatƒ±ldƒ±")
    
    def uyku_kontrol_durdur(self):
        """Uyku kontrol thread'ini durdur"""
        self.uyku_thread_aktif = False
        if self.uyku_thread and self.uyku_thread.is_alive():
            self.uyku_thread.join(timeout=2)
        
        warn("UYKU", "Uyku kontrol sistemi durduruldu")
        log_system("Uyku modu kontrol sistemi durduruldu")
    
    def _uyku_kontrol_dongusu(self):
        """Uyku kontrol d√∂ng√ºs√º"""
        while self.uyku_thread_aktif:
            try:
                # Oturum aktif mi kontrol et
                oturum_aktif = False
                if self.sistem_referans and hasattr(self.sistem_referans, 'aktif_oturum'):
                    oturum_aktif = self.sistem_referans.aktif_oturum.get("aktif", False)
                
                # Eƒüer oturum aktifse aktiviteyi kaydet
                if oturum_aktif:
                    self.aktivite_kaydet()
                
                # Uyku modu kontrol√º
                if not self.uyku_modu_aktif and not oturum_aktif:
                    # Son aktiviteden bu yana ge√ßen s√ºre
                    gecen_sure = datetime.now() - self.son_aktivite_zamani
                    
                    if gecen_sure >= timedelta(minutes=self.uyku_suresi_dakika):
                        self.uyku_moduna_gir()
                
                # 30 saniyede bir kontrol et
                time.sleep(30)
                
            except Exception as e:
                log_warning(f"Uyku kontrol d√∂ng√ºs√º hatasƒ±: {e}")
                time.sleep(5)
    
    def uyku_moduna_gir(self):
        """Uyku moduna ge√ß"""
        if self.uyku_modu_aktif:
            return
        
        self.uyku_modu_aktif = True
        self.uyku_modu_sayisi += 1
        self.uyku_baslangic_zamani = datetime.now()  # Uyku ba≈ülangƒ±√ß zamanƒ±nƒ± kaydet
        uyku_baslangic = datetime.now()
        
        # Uyku modu mesajlarƒ±nƒ± logla
        step("UYKU", "üí§ Makine uyku moduna ge√ßiyor...")
        log_system("=== UYKU MODU AKTƒ∞F ===")
        
        for i, mesaj in enumerate(self.uyku_mesajlari):
            time.sleep(0.5)  # Dramatik efekt i√ßin
            log_system(mesaj)
            
            # Her 2 mesajda bir terminal √ßƒ±ktƒ±sƒ±
            if i % 2 == 0:
                info("UYKU", mesaj)
        
        # Sistem durumu g√ºncelleme
        if self.sistem_referans:
            self.sistem_referans.uyku_modu_aktif = True
        
        # Uyku modu istatistikleri
        log_system(f"Uyku modu #{self.uyku_modu_sayisi} ba≈ülatƒ±ldƒ±")
        log_system(f"Son aktivite: {self.son_aktivite_zamani.strftime('%H:%M:%S')}")
        log_system(f"Uyku s√ºresi: {self.uyku_suresi_dakika} dakika")
        
        ok("UYKU", f"Uyku modu aktif - #{self.uyku_modu_sayisi}")
        log_success("Makine uyku moduna ba≈üarƒ±yla ge√ßti")
    
    def uyku_modundan_cik(self):
        """Uyku modundan √ßƒ±k"""
        if not self.uyku_modu_aktif:
            return
        
        # Uyku s√ºresini doƒüru hesapla
        if self.uyku_baslangic_zamani:
            uyku_suresi = datetime.now() - self.uyku_baslangic_zamani
            self.toplam_uyku_suresi += uyku_suresi.total_seconds()
            
            # Enerji tasarrufu hesapla (yakla≈üƒ±k 2.5kW tasarruf)
            tasarruf_kwh = (uyku_suresi.total_seconds() / 3600) * 2.5
            self.enerji_tasarrufu_kwh += tasarruf_kwh
        else:
            uyku_suresi = timedelta(seconds=0)
            tasarruf_kwh = 0.0
        
        # Uyku √ßƒ±kƒ±≈ü mesajlarƒ±nƒ± logla
        step("UYKU", "üåÖ Makine uyku modundan √ßƒ±kƒ±yor...")
        log_system("=== UYKU MODUNDAN √áIKILIYOR ===")
        
        for i, mesaj in enumerate(self.uyku_cikis_mesajlari):
            time.sleep(0.3)  # Hƒ±zlƒ± aktivasyon
            log_system(mesaj)
            
            # Her mesajda terminal √ßƒ±ktƒ±sƒ±
            info("UYKU", mesaj)
        
        # Sistem durumu g√ºncelleme
        if self.sistem_referans:
            self.sistem_referans.uyku_modu_aktif = False
        
        # ƒ∞statistikleri logla
        log_system(f"Uyku modu #{self.uyku_modu_sayisi} sonlandƒ±rƒ±ldƒ±")
        log_system(f"Uyku s√ºresi: {uyku_suresi.total_seconds():.0f} saniye")
        log_system(f"Enerji tasarrufu: {tasarruf_kwh:.2f} kWh")
        log_system(f"Toplam tasarruf: {self.enerji_tasarrufu_kwh:.2f} kWh")
        
        self.uyku_modu_aktif = False
        self.uyku_baslangic_zamani = None  # Uyku ba≈ülangƒ±√ß zamanƒ±nƒ± temizle
        
        ok("UYKU", f"Uyku modundan √ßƒ±kƒ±ldƒ± - {uyku_suresi.total_seconds():.0f}s tasarruf")
        log_success("Makine aktif moda ba≈üarƒ±yla ge√ßti")
    
    def uyku_durumu_al(self) -> dict:
        """Uyku modu durumunu al"""
        return {
            "uyku_modu_aktif": self.uyku_modu_aktif,
            "son_aktivite": self.son_aktivite_zamani.strftime('%H:%M:%S'),
            "uyku_suresi_dakika": self.uyku_suresi_dakika,
            "uyku_modu_sayisi": self.uyku_modu_sayisi,
            "toplam_uyku_suresi_saat": self.toplam_uyku_suresi / 3600,
            "enerji_tasarrufu_kwh": round(self.enerji_tasarrufu_kwh, 2),
            "kalan_sure_dakika": self._kalan_sure_hesapla()
        }
    
    def _kalan_sure_hesapla(self) -> int:
        """Uyku moduna ge√ßmeye kalan s√ºreyi hesapla"""
        if self.uyku_modu_aktif:
            return 0
        
        gecen_sure = datetime.now() - self.son_aktivite_zamani
        kalan_sure = timedelta(minutes=self.uyku_suresi_dakika) - gecen_sure
        
        if kalan_sure.total_seconds() <= 0:
            return 0
        
        return int(kalan_sure.total_seconds() / 60)
    
    def uyku_ayarlari_guncelle(self, uyku_suresi_dakika: int = None):
        """Uyku ayarlarƒ±nƒ± g√ºncelle"""
        if uyku_suresi_dakika is not None:
            self.uyku_suresi_dakika = uyku_suresi_dakika
            log_system(f"Uyku s√ºresi {uyku_suresi_dakika} dakikaya g√ºncellendi")
    
    def uyku_istatistikleri_al(self) -> dict:
        """Detaylƒ± uyku istatistikleri"""
        return {
            "toplam_uyku_modu": self.uyku_modu_sayisi,
            "toplam_uyku_suresi_saat": round(self.toplam_uyku_suresi / 3600, 2),
            "toplam_enerji_tasarrufu_kwh": round(self.enerji_tasarrufu_kwh, 2),
            "ortalama_uyku_suresi_dakika": round(
                (self.toplam_uyku_suresi / 3600) / max(self.uyku_modu_sayisi, 1) * 60, 1
            ),
            "enerji_tasarrufu_yuzde": round(
                (self.enerji_tasarrufu_kwh / (self.enerji_tasarrufu_kwh + 10)) * 100, 1
            ) if self.enerji_tasarrufu_kwh > 0 else 0
        }


# Global uyku modu servisi
uyku_modu_servisi = UykuModuServisi()
