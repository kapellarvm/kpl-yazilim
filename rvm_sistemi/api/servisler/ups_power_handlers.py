#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
UPS GÃ¼Ã§ Kesintisi Ä°ÅŸleyicileri
GÃ¼Ã§ kesintisi ve geri gelme durumlarÄ±nda yapÄ±lacak iÅŸlemler
"""

import asyncio
import time
from ...utils.logger import log_system, log_error, log_warning, log_oturum
from ...utils.terminal import section, ok, warn, err, wait, step, status
from ...makine.senaryolar import oturum_var
from ...api.servisler.dimdb_servis import DimdbServis


async def handle_power_failure():
    """UPS gÃ¼Ã§ kesintisi durumunda yapÄ±lacak iÅŸlemler"""
    section("âš¡ ELEKTRÄ°K KESÄ°NTÄ°SÄ° TESPÄ°T EDÄ°LDÄ°!", "UPS Ã§alÄ±ÅŸÄ±yor - Acil iÅŸlemler baÅŸlatÄ±lÄ±yor")
    log_error("âš¡ UPS GÃœÃ‡ KESÄ°NTÄ°SÄ° - Acil iÅŸlemler baÅŸlatÄ±lÄ±yor")
    
    try:
        # 1. UyarÄ± gÃ¶ster
        try:
            from ...makine.senaryolar.uyari import uyari_goster
            uyari_goster(mesaj="Makinenin ElektiriÄŸi Kesildi !", sure=20)
            warn("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", "UyarÄ± gÃ¶sterildi")
        except Exception as e:
            err("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", f"UyarÄ± gÃ¶sterilemedi: {e}")
            log_error(f"UPS kesintisi: UyarÄ± gÃ¶sterilemedi: {e}")
        
        # 2. MotorlarÄ± iptal et - DoÄŸru referans kullan
        try:
            from ...makine import kart_referanslari
            motor = kart_referanslari.motor_al()
            if motor:
                status("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", "Motorlar iptal ediliyor...", level="stop")
                motor.motorlari_iptal_et()
                ok("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", "Motorlar iptal edildi")
                log_system("UPS kesintisi: Motorlar iptal edildi")
            else:
                warn("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", "Motor kartÄ± bulunamadÄ±")
                log_warning("UPS kesintisi: Motor kartÄ± bulunamadÄ±")
        except Exception as e:
            err("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", f"Motor iptal etme hatasÄ±: {e}")
            log_error(f"UPS kesintisi: Motor iptal etme hatasÄ±: {e}")
        
        # 3. Aktif oturum var mÄ± kontrol et
        if oturum_var.sistem.aktif_oturum["aktif"]:
            session_id = oturum_var.sistem.aktif_oturum["sessionId"]
            step("OTURUM", f"Aktif oturum sonlandÄ±rÄ±lÄ±yor: {session_id}")
            log_oturum("UPS kesintisi: Aktif oturum sonlandÄ±rÄ±lÄ±yor")
            
            # 4. SessionEnd isteÄŸi gÃ¶nder
            try:
                step("DÄ°M-DB", "sessionEnd isteÄŸi gÃ¶nderiliyor")
                import requests
                session_end_data = {"sessionId": session_id}
                response = requests.post("http://localhost:4321/dimdb/sessionEnd", json=session_end_data, timeout=5)
                if response.status_code == 200:
                    ok("DÄ°M-DB", "SessionEnd isteÄŸi baÅŸarÄ±yla gÃ¶nderildi")
                    log_oturum("UPS kesintisi: SessionEnd isteÄŸi gÃ¶nderildi")
                else:
                    warn("DÄ°M-DB", f"SessionEnd isteÄŸi baÅŸarÄ±sÄ±z: {response.status_code}")
                    log_warning(f"UPS kesintisi: SessionEnd isteÄŸi baÅŸarÄ±sÄ±z: {response.status_code}")
            except Exception as e:
                err("DÄ°M-DB", f"SessionEnd isteÄŸi hatasÄ±: {e}")
                log_error(f"UPS kesintisi: SessionEnd isteÄŸi hatasÄ±: {e}")
            
            # 5. Transaction result gÃ¶nder
            try:
                step("DÄ°M-DB", "Transaction result gÃ¶nderiliyor")
                await DimdbServis.send_transaction_result()
                ok("DÄ°M-DB", "Transaction result baÅŸarÄ±yla gÃ¶nderildi")
                log_oturum("UPS kesintisi: Transaction result gÃ¶nderildi")
            except Exception as e:
                err("DÄ°M-DB", f"Transaction result gÃ¶nderme hatasÄ±: {e}")
                log_error(f"UPS kesintisi: Transaction result gÃ¶nderme hatasÄ±: {e}")
            
            # 6. Oturumu sonlandÄ±r
            oturum_var.sistem.aktif_oturum["aktif"] = False
            oturum_var.sistem.aktif_oturum["sessionId"] = ""
            oturum_var.sistem.aktif_oturum["userId"] = ""
            ok("OTURUM", "Oturum sonlandÄ±rÄ±ldÄ±")
            log_oturum("UPS kesintisi: Oturum sonlandÄ±rÄ±ldÄ±")
        else:
            status("OTURUM", "Aktif oturum yok", level="info")
        
        # 6. KonveyÃ¶rde Ã¼rÃ¼n var mÄ± kontrol et ve geri dÃ¶ndÃ¼r
        if hasattr(oturum_var.sistem, 'motor_ref') and oturum_var.sistem.motor_ref:
            try:
                # KonveyÃ¶rde Ã¼rÃ¼n var mÄ± kontrol et (kabul edilen Ã¼rÃ¼nler listesi)
                urun_var_mi = (len(oturum_var.sistem.kabul_edilen_urunler) > 0 or 
                              len(oturum_var.sistem.veri_senkronizasyon_listesi) > 0 or
                              oturum_var.sistem.giris_sensor_durum)
                
                if urun_var_mi:
                    step("KONVEYÃ–R", "KonveyÃ¶rde Ã¼rÃ¼n tespit edildi - geri dÃ¶ndÃ¼rÃ¼lÃ¼yor")
                    oturum_var.sistem.motor_ref.konveyor_geri()
                    ok("KONVEYÃ–R", "KonveyÃ¶r geri dÃ¶ndÃ¼rÃ¼ldÃ¼")
                    log_system("UPS kesintisi: KonveyÃ¶r geri dÃ¶ndÃ¼rÃ¼ldÃ¼ (Ã¼rÃ¼n vardÄ±)")
                else:
                    status("KONVEYÃ–R", "KonveyÃ¶rde Ã¼rÃ¼n yok - geri dÃ¶ndÃ¼rme atlandÄ±", level="info")
                    log_system("UPS kesintisi: KonveyÃ¶rde Ã¼rÃ¼n yok - geri dÃ¶ndÃ¼rme atlandÄ±")
            except Exception as e:
                err("KONVEYÃ–R", f"KonveyÃ¶r kontrol hatasÄ±: {e}")
                log_error(f"UPS kesintisi: KonveyÃ¶r kontrol hatasÄ±: {e}")
        
        # 7. Sistem durumunu gÃ¼ncelle
        oturum_var.sistem.ups_kesintisi = True
        oturum_var.sistem.ups_kesinti_zamani = time.time()
        
        # 8. GSI mesajÄ± gelene kadar bekleme durumuna geÃ§
        oturum_var.sistem.gsi_bekleme_durumu = True
        wait("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", "GSI mesajÄ± bekleniyor...")
        status("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", "Sistem UPS modunda - GSI gelene kadar bekliyor", level="info")
        log_system("UPS kesintisi: GSI mesajÄ± bekleniyor")
        
        ok("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", "TÃ¼m iÅŸlemler tamamlandÄ±")
        log_system("âœ… UPS gÃ¼Ã§ kesintisi iÅŸlemleri tamamlandÄ±")
        
    except Exception as e:
        err("ELEKTRÄ°K KESÄ°NTÄ°SÄ°", f"Ä°ÅŸlem hatasÄ±: {e}")
        log_error(f"UPS gÃ¼Ã§ kesintisi iÅŸleme hatasÄ±: {e}")


async def handle_power_restored():
    """UPS gÃ¼Ã§ geri geldiÄŸinde yapÄ±lacak iÅŸlemler"""
    section("ğŸ”Œ ELEKTRÄ°K GERÄ° GELDÄ°!", "UPS normal Ã§alÄ±ÅŸmaya dÃ¶ndÃ¼ - Sistem normalleÅŸtiriliyor")
    log_system("ğŸ”Œ UPS GÃœÃ‡ GERÄ° GELDÄ° - Sistem normalleÅŸtiriliyor")
    
    try:
        # 1. UPS kesintisi durumunu temizle
        oturum_var.sistem.ups_kesintisi = False
        oturum_var.sistem.ups_kesinti_zamani = None
        ok("ELEKTRÄ°K GERÄ°", "UPS kesintisi durumu temizlendi")
        
        # 2. GSI bekleme durumunu temizle
        oturum_var.sistem.gsi_bekleme_durumu = False
        ok("ELEKTRÄ°K GERÄ°", "GSI bekleme durumu temizlendi")
        
        # 3. KonveyÃ¶rÃ¼ durdur (GSI mesajÄ± gelene kadar)
        if hasattr(oturum_var.sistem, 'motor_ref') and oturum_var.sistem.motor_ref:
            try:
                status("ELEKTRÄ°K GERÄ°", "KonveyÃ¶r durduruluyor (GSI bekleniyor)...", level="wait")
                oturum_var.sistem.motor_ref.konveyor_dur()
                ok("ELEKTRÄ°K GERÄ°", "KonveyÃ¶r durduruldu")
                log_system("UPS geri geldi: KonveyÃ¶r durduruldu (GSI bekleniyor)")
            except Exception as e:
                err("ELEKTRÄ°K GERÄ°", f"KonveyÃ¶r durdurma hatasÄ±: {e}")
                log_error(f"UPS geri geldi: KonveyÃ¶r durdurma hatasÄ±: {e}")
        
        # 4. Sistem durumunu sÄ±fÄ±rla
        step("ELEKTRÄ°K GERÄ°", "Sistem durumu sÄ±fÄ±rlanÄ±yor...")
        oturum_var.sistem.iade_lojik = False
        oturum_var.sistem.iade_lojik_onceki_durum = False
        oturum_var.sistem.barkod_lojik = False
        oturum_var.sistem.veri_senkronizasyon_listesi.clear()
        oturum_var.sistem.kabul_edilen_urunler.clear()
        oturum_var.sistem.onaylanan_urunler.clear()
        oturum_var.sistem.uzunluk_goruntu_isleme = None
        oturum_var.sistem.agirlik_kuyruk.clear()
        oturum_var.sistem.uzunluk_motor_verisi = None
        ok("ELEKTRÄ°K GERÄ°", "Sistem durumu sÄ±fÄ±rlandÄ±")
        
        wait("ELEKTRÄ°K GERÄ°", "GSI mesajÄ± bekleniyor - Yeni oturum iÃ§in hazÄ±r")
        ok("ELEKTRÄ°K GERÄ°", "TÃ¼m iÅŸlemler tamamlandÄ±")
        log_system("âœ… UPS gÃ¼Ã§ geri gelme iÅŸlemleri tamamlandÄ±")
        log_system("ğŸ”„ Sistem GSI mesajÄ± bekliyor - Yeni oturum iÃ§in hazÄ±r")
        
    except Exception as e:
        err("ELEKTRÄ°K GERÄ°", f"Ä°ÅŸlem hatasÄ±: {e}")
        log_error(f"UPS gÃ¼Ã§ geri gelme iÅŸleme hatasÄ±: {e}")


def check_gsi_after_power_restore():
    """GÃ¼Ã§ geri geldikten sonra GSI mesajÄ± kontrolÃ¼"""
    if (hasattr(oturum_var.sistem, 'gsi_lojik') and 
        oturum_var.sistem.gsi_lojik and 
        hasattr(oturum_var.sistem, 'ups_kesintisi') and 
        not oturum_var.sistem.ups_kesintisi):
        
        section("ğŸ”„ GSI MESAJI ALINDI!", "UPS kesintisi sonrasÄ± sistem normalleÅŸiyor")
        ok("SÄ°STEM", "Sistem normal Ã§alÄ±ÅŸmaya dÃ¶nÃ¼yor")
        log_system("ğŸ”„ GSI mesajÄ± alÄ±ndÄ± - UPS kesintisi sonrasÄ± sistem normalleÅŸiyor")
        
        # GSI lojik durumunu temizle
        oturum_var.sistem.gsi_lojik = False
        
        # Sistem normal Ã§alÄ±ÅŸmaya devam edebilir
        return True
    
    return False
