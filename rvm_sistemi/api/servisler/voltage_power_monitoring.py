#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Voltage Power Monitoring Servisi
Modbus bus_voltage verisini izleyerek elektrik kesintisi tespit eder
"""

import asyncio
import time
import threading
from typing import Optional, Callable
from ...utils.logger import log_system, log_error, log_warning
from ...utils.terminal import status, warn, ok
from ...makine.senaryolar import oturum_var
from ...api.servisler.dimdb_servis import DimdbServis


class VoltagePowerMonitoringServis:
    """Voltage tabanlÄ± elektrik kesintisi izleme servisi"""
    
    def __init__(self, modbus_client=None, voltage_threshold: float = 300.0):
        """
        Voltage monitoring servisini baÅŸlat
        Args:
            modbus_client: GA500ModbusClient instance
            voltage_threshold: Elektrik kesintisi tespit eÅŸiÄŸi (Volt) - varsayÄ±lan 300V
        """
        self.modbus_client = modbus_client
        self.voltage_threshold = voltage_threshold
        self.is_running = False
        self.monitoring_task = None
        self.last_voltage = None
        self.power_connected = True
        self.power_failure_detected = False
        self.session_ended_due_to_power_failure = False
        
        # Callback fonksiyonlarÄ±
        self.power_failure_callback: Optional[Callable] = None
        self.power_restored_callback: Optional[Callable] = None
        
        # Thread-safe lock
        self.lock = threading.Lock()
        
        # Voltage okuma geÃ§miÅŸi (hysteresis iÃ§in)
        self.voltage_history = []
        self.history_size = 5  # Son 5 okumayÄ± sakla
        self.hysteresis_threshold = 50.0  # 50V hysteresis (300V altÄ± kesinti, 350V Ã¼stÃ¼ normal)
        
        # BaÅŸlangÄ±Ã§ bypass mekanizmasÄ± - basitleÅŸtirildi
        self.startup_bypass_active = True
        self.startup_bypass_duration = 5.0  # 5 saniye basit bypass
        self.startup_bypass_start_time = None
        
    def set_modbus_client(self, modbus_client):
        """Modbus client referansÄ±nÄ± ayarla"""
        self.modbus_client = modbus_client
        
    def set_callbacks(self, power_failure_callback: Callable = None, 
                     power_restored_callback: Callable = None):
        """Callback fonksiyonlarÄ±nÄ± ayarla"""
        self.power_failure_callback = power_failure_callback
        self.power_restored_callback = power_restored_callback
    
    async def start_monitoring(self):
        """Voltage monitoring'i baÅŸlat"""
        if self.is_running:
            log_warning("Voltage monitoring zaten Ã§alÄ±ÅŸÄ±yor")
            return
        
        # Modbus client yoksa da baÅŸlat (test iÃ§in)
        if not self.modbus_client:
            log_warning("Modbus client bulunamadÄ±, voltage monitoring test modunda baÅŸlatÄ±lÄ±yor")
        
        # BaÅŸlangÄ±Ã§ bypass'Ä±nÄ± baÅŸlat
        self.startup_bypass_active = True
        self.startup_bypass_start_time = time.time()
        
        self.is_running = True
        self.monitoring_task = asyncio.create_task(self._monitoring_loop())
        log_system("Voltage power monitoring servisi baÅŸlatÄ±ldÄ±")
    
    async def stop_monitoring(self):
        """Voltage monitoring'i durdur"""
        if not self.is_running:
            return
            
        self.is_running = False
        if self.monitoring_task:
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass
        log_system("Voltage power monitoring servisi durduruldu")
    
    def _check_startup_bypass(self) -> bool:
        """BaÅŸlangÄ±Ã§ bypass kontrolÃ¼ - True dÃ¶nerse monitoring atlanÄ±r"""
        current_time = time.time()
        elapsed_time = current_time - self.startup_bypass_start_time
        
        # Basit zaman bazlÄ± bypass kontrolÃ¼
        if elapsed_time < self.startup_bypass_duration:
            return True
        
        # Bypass tamamlandÄ±
        self.startup_bypass_active = False
        log_system("Voltage monitoring baÅŸlangÄ±Ã§ bypass tamamlandÄ±")
        return False
    
    def _is_voltage_stable(self, voltage: float) -> bool:
        """Voltage deÄŸerinin stabil olup olmadÄ±ÄŸÄ±nÄ± kontrol et"""
        if voltage is None:
            return False
        
        # Voltage deÄŸeri makul aralÄ±kta mÄ±? (100V - 500V arasÄ±)
        if voltage < 100.0 or voltage > 500.0:
            return False
        
        # GeÃ§miÅŸteki deÄŸerlerle karÅŸÄ±laÅŸtÄ±r
        if len(self.voltage_history) < 3:
            return True  # HenÃ¼z yeterli geÃ§miÅŸ yok, stabil kabul et
        
        # Son 3 deÄŸerin ortalamasÄ±ndan Ã§ok farklÄ± mÄ±?
        recent_avg = sum(self.voltage_history[-3:]) / 3
        if abs(voltage - recent_avg) > 50.0:  # 50V'den fazla fark varsa stabil deÄŸil
            return False
        
        return True
    
    async def _monitoring_loop(self):
        """Ana voltage monitoring dÃ¶ngÃ¼sÃ¼"""
        consecutive_low_voltage = 0
        max_consecutive_low_voltage = 2  # 2 ardÄ±ÅŸÄ±k dÃ¼ÅŸÃ¼k voltaj sonrasÄ± kesinti tespit et (1 saniyede tespit)
        
        
        while self.is_running:
            # BaÅŸlangÄ±Ã§ bypass kontrolÃ¼
            if self.startup_bypass_active:
                if self._check_startup_bypass():
                    await asyncio.sleep(0.5)  # Bypass sÄ±rasÄ±nda 0.5 saniye bekle
                    continue
            try:
                # Modbus client yoksa sadece bekle
                if not self.modbus_client or not self.modbus_client.is_connected:
                    # Modbus baÄŸlantÄ±sÄ± yoksa sadece bekle
                    await asyncio.sleep(5.0)
                    continue
                
                # Bus voltage kontrolÃ¼ yap
                current_voltage = self._get_bus_voltage()
                
                if current_voltage is not None:
                    # Voltage alÄ±ndÄ±, geÃ§miÅŸe ekle
                    self._add_voltage_to_history(current_voltage)
                    
                    # GÃ¼Ã§ geri geldi mi kontrol et (daha Ã¶nce kesinti tespit edilmiÅŸse)
                    if self.power_failure_detected and current_voltage > self.voltage_threshold:
                        print(f"ðŸ”Œ GÃ¼Ã§ geri geldi! Voltage: {current_voltage}V", flush=True)
                        with self.lock:
                            self.power_failure_detected = False
                            self.power_connected = True
                            
                            if self.power_restored_callback:
                                try:
                                    await self.power_restored_callback()
                                except Exception as e:
                                    log_error(f"Power restored callback hatasÄ±: {e}")
                        
                        print(f"âœ… GÃ¼Ã§ geri geldi - sistem normale dÃ¶ndÃ¼", flush=True)
                        log_system("âœ… GÃ¼Ã§ geri geldi - sistem normale dÃ¶ndÃ¼")
                    
                    # Bypass sÄ±rasÄ±nda sadece voltage'Ä± kaydet
                    
                    # Hysteresis ile karar ver
                    voltage_status = self._evaluate_voltage_status()
                    
                    if voltage_status == "low":
                        # DÃ¼ÅŸÃ¼k voltaj tespit edildi
                        consecutive_low_voltage += 1
                        warn("VOLTAGE MONITORING", f"DÃ¼ÅŸÃ¼k voltaj: {current_voltage}V ({consecutive_low_voltage}/{max_consecutive_low_voltage})")
                        log_warning(f"Voltage dÃ¼ÅŸÃ¼k: {current_voltage}V ({consecutive_low_voltage}/{max_consecutive_low_voltage})")
                        
                        if consecutive_low_voltage >= max_consecutive_low_voltage:
                            # Elektrik kesintisi tespit edildi
                            with self.lock:
                                if not self.power_failure_detected:
                                    self.power_failure_detected = True
                                    self.power_connected = False
                                    status("VOLTAGE MONITORING", "ELEKTRÄ°K KESÄ°NTÄ°SÄ° TESPÄ°T EDÄ°LDÄ°!", level="err")
                                    log_error(f"âš¡ VOLTAGE ELEKTRÄ°K KESÄ°NTÄ°SÄ° TESPÄ°T EDÄ°LDÄ°! ({current_voltage}V)")
                                    
                                    if self.power_failure_callback:
                                        try:
                                            await self.power_failure_callback()
                                        except Exception as e:
                                            log_error(f"Power failure callback hatasÄ±: {e}")
                    
                    elif voltage_status == "normal":
                        # Normal voltaj - gÃ¼Ã§ geri geldi
                        with self.lock:
                            if not self.power_connected:
                                # GÃ¼Ã§ geri geldi
                                self.power_connected = True
                                self.power_failure_detected = False
                                self.session_ended_due_to_power_failure = False
                                ok("VOLTAGE MONITORING", f"GÃ¼Ã§ geri geldi - Normal voltaj: {current_voltage}V")
                                log_system(f"ðŸ”Œ Voltage gÃ¼Ã§ geri geldi: {current_voltage}V")
                                
                                if self.power_restored_callback:
                                    try:
                                        await self.power_restored_callback()
                                    except Exception as e:
                                        log_error(f"Power restored callback hatasÄ±: {e}")
                        
                        consecutive_low_voltage = 0
                    
                    self.last_voltage = current_voltage
                    
                else:
                    # Voltage alÄ±namadÄ±, modbus hatasÄ±
                    consecutive_low_voltage += 1
                    warn("VOLTAGE MONITORING", f"Voltage okunamadÄ± ({consecutive_low_voltage}/{max_consecutive_low_voltage})")
                    log_warning(f"Voltage okunamadÄ± ({consecutive_low_voltage}/{max_consecutive_low_voltage})")
                    
                    if consecutive_low_voltage >= max_consecutive_low_voltage:
                        # Modbus hatasÄ± nedeniyle kesinti tespit edildi
                        with self.lock:
                            if not self.power_failure_detected:
                                self.power_failure_detected = True
                                self.power_connected = False
                                status("VOLTAGE MONITORING", "MODBUS HATASI - ELEKTRÄ°K KESÄ°NTÄ°SÄ° TESPÄ°T EDÄ°LDÄ°!", level="err")
                                log_error("âš¡ VOLTAGE MODBUS HATASI - ELEKTRÄ°K KESÄ°NTÄ°SÄ° TESPÄ°T EDÄ°LDÄ°!")
                                
                                if self.power_failure_callback:
                                    try:
                                        await self.power_failure_callback()
                                    except Exception as e:
                                        log_error(f"Power failure callback hatasÄ±: {e}")
                
                # 0.5 saniye bekle (Modbus verisi yarÄ±m saniyede bir geliyor)
                await asyncio.sleep(0.5)
                
            except Exception as e:
                log_error(f"Voltage monitoring hatasÄ±: {e}")
                await asyncio.sleep(2.0)
    
    def _get_bus_voltage(self) -> Optional[float]:
        """Modbus'tan bus voltage deÄŸerini al"""
        try:
            if not self.modbus_client or not self.modbus_client.is_connected:
                return None
                
            # Modbus client'Ä±n get_bus_voltage fonksiyonunu kullan
            voltage = self.modbus_client.get_bus_voltage(1)  # Slave ID 1
            return voltage
            
        except Exception as e:
            log_error(f"Bus voltage alma hatasÄ±: {e}")
            return None
    
    def _add_voltage_to_history(self, voltage: float):
        """Voltage deÄŸerini geÃ§miÅŸe ekle"""
        self.voltage_history.append(voltage)
        if len(self.voltage_history) > self.history_size:
            self.voltage_history.pop(0)
    
    def _evaluate_voltage_status(self) -> str:
        """Voltage geÃ§miÅŸine gÃ¶re durumu deÄŸerlendir (hysteresis ile)"""
        if not self.voltage_history:
            return "unknown"
        
        # Son voltage deÄŸerini al
        current_voltage = self.voltage_history[-1]
        
        # Hysteresis mantÄ±ÄŸÄ±
        if self.power_connected:
            # Åžu anda gÃ¼Ã§ baÄŸlÄ± - dÃ¼ÅŸÃ¼k voltaj eÅŸiÄŸi
            if current_voltage <= self.voltage_threshold:
                return "low"
            else:
                return "normal"
        else:
            # Åžu anda gÃ¼Ã§ kesik - yÃ¼ksek voltaj eÅŸiÄŸi (hysteresis)
            if current_voltage >= (self.voltage_threshold + self.hysteresis_threshold):
                return "normal"
            else:
                return "low"
    
    def get_status(self) -> dict:
        """Voltage monitoring servis durumunu dÃ¶ndÃ¼rÃ¼r"""
        with self.lock:
            return {
                "is_running": self.is_running,
                "power_connected": self.power_connected,
                "power_failure_detected": self.power_failure_detected,
                "session_ended_due_to_power_failure": self.session_ended_due_to_power_failure,
                "last_voltage": self.last_voltage,
                "voltage_threshold": self.voltage_threshold,
                "voltage_history": self.voltage_history.copy(),
                "hysteresis_threshold": self.hysteresis_threshold,
                "startup_bypass_active": self.startup_bypass_active
            }


# Global voltage monitoring servis instance
voltage_power_monitoring_servis = VoltagePowerMonitoringServis()
