#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
G√∂r√ºnt√º ƒ∞≈üleme Servisi
Ubuntu Server i√ßin optimize edilmi≈ü, asenkron g√∂r√ºnt√º i≈üleme sistemi
Global Shutter kameralar i√ßin ultra hƒ±zlƒ± i≈üleme
"""

import time
import cv2
import os
import threading
import queue
from ultralytics import YOLO
from .kamera_servisi import KameraServisi
from .goruntu_sonuc_tipi import GoruntuSonuc, MalzemeTuru

# Thread lock ve queue
goruntu_lock = threading.Lock()
goruntu_queue = queue.Queue(maxsize=10)  # En fazla 10 g√∂r√ºnt√º bekleyebilir

class GoruntuIslemeServisi:
    """Ana g√∂r√ºnt√º i≈üleme servisi sƒ±nƒ±fƒ± - Thread-safe asenkron i≈üleme"""
    
    def __init__(self):
        """Servisi ba≈ülat"""
        print("üîÑ [G√ñR√úNT√úƒ∞≈û] G√∂r√ºnt√º i≈üleme servisi ba≈ülatƒ±lƒ±yor...")
        
        # YOLO modelini y√ºkle
        model_yolu = os.path.join(os.path.dirname(__file__), "b_s_y.pt")
        if not os.path.exists(model_yolu):
            raise FileNotFoundError(f"YOLO model dosyasƒ± bulunamadƒ±: {model_yolu}")
            
        self.model = YOLO(model_yolu)
        self.cihaz = "cpu"
        
        # Kamerayƒ± ba≈ülat
        self.kamera = KameraServisi()
        self.kamera.baslat()
        
        # Kalibrasyon deƒüerleri (mm/pixel)
        self.x_olcek = 0.5510
        self.y_olcek = 0.5110
        
        # Asenkron i≈üleme i√ßin thread kontrol√º
        self.islem_thread_aktif = False
        self.islem_thread = None
        self.sonuc_queue = queue.Queue(maxsize=5)
        
        # GSO sens√∂r√º i√ßin asenkron thread'i hemen ba≈ülat
        self._asenkron_isleme_baslat()
        
        # YOLO etiketlerini malzeme t√ºrlerine e≈üle
        self.etiket_eslemesi = {
            # PET t√ºrleri
            "bottle": MalzemeTuru.PET,
            "pet": MalzemeTuru.PET,
            "pet_bottle": MalzemeTuru.PET,
            "plastic_bottle": MalzemeTuru.PET,
            "plastik": MalzemeTuru.PET,
            "plastic": MalzemeTuru.PET,
            
            # Cam t√ºrleri
            "glass": MalzemeTuru.CAM,
            "glass_bottle": MalzemeTuru.CAM,
            "cam": MalzemeTuru.CAM,
            
            # Al√ºminyum t√ºrleri  
            "can": MalzemeTuru.ALUMINYUM,
            "aluminum": MalzemeTuru.ALUMINYUM,
            "aluminum_can": MalzemeTuru.ALUMINYUM,
            "metal_can": MalzemeTuru.ALUMINYUM,
            "al√ºminyum": MalzemeTuru.ALUMINYUM,
            "metal": MalzemeTuru.ALUMINYUM,
        }
        
        print("‚úÖ [G√ñR√úNT√úƒ∞≈û] Servisi ba≈üarƒ±yla ba≈ülatƒ±ldƒ± - kamera s√ºrekli hazƒ±r")
    
    def goruntu_yakala_ve_isle(self) -> GoruntuSonuc:
        """
        GSO tetiklemesi i√ßin MAKSIMUM HIZLI g√∂r√ºnt√º yakalama
        Sens√∂r sinyali geldiƒüi anda anƒ±nda fotoƒüraf √ßeker
        
        Returns:
            GoruntuSonuc: ƒ∞≈ülenmi≈ü g√∂r√ºnt√º sonucu
        """
        try:
            # ULTRA HIZLI g√∂r√ºnt√º yakala - minimal kod
            with goruntu_lock:
                kare = self.kamera.fotograf_cek()
            
            if kare is None:
                return self._hata_sonucu("kamera_hatasi")
            
            # HIZLI queue i≈ülemi
            try:
                islem_id = int(time.time() * 1000000)  # Mikrosaniye
                goruntu_queue.put_nowait({
                    'id': islem_id,
                    'kare': kare,
                    'zaman': time.time()
                })
                
                # Sonucu HEMEN bekle (500ms max - daha hƒ±zlƒ±)
                try:
                    sonuc_data = self.sonuc_queue.get(timeout=0.5)
                    return sonuc_data['sonuc']
                        
                except queue.Empty:
                    # Timeout: direkt senkron i≈üle
                    return self._senkron_isle(kare)
                    
            except queue.Full:
                # Kuyruk dolu: direkt senkron i≈üle
                return self._senkron_isle(kare)
                
        except Exception as e:
            return self._hata_sonucu("genel_hata")
    
    def _asenkron_isleme_baslat(self):
        """Asenkron YOLO i≈üleme thread'ini ba≈ülatƒ±r"""
        if self.islem_thread_aktif:
            return
            
        self.islem_thread_aktif = True
        self.islem_thread = threading.Thread(
            target=self._asenkron_isleme_worker, 
            daemon=True,
            name="GoruntuIslemeThread"
        )
        self.islem_thread.start()
        print("üöÄ [G√ñR√úNT√úƒ∞≈û] Asenkron i≈üleme thread'i ba≈ülatƒ±ldƒ±")
    
    def _asenkron_isleme_worker(self):
        """Asenkron YOLO i≈üleme worker thread'i"""
        print("üîÑ [G√ñR√úNT√úƒ∞≈û] ƒ∞≈üleme worker ba≈üladƒ±")
        
        while self.islem_thread_aktif:
            try:
                # G√∂r√ºnt√º var mƒ± kontrol et
                try:
                    goruntu_data = goruntu_queue.get(timeout=1.0)
                except queue.Empty:
                    continue
                
                # YOLO ile i≈üle
                baslangic = time.time()
                sonuc = self._yolo_isle(goruntu_data['kare'])
                isleme_suresi = (time.time() - baslangic) * 1000
                
                print(f"üß† [G√ñR√úNT√úƒ∞≈û] YOLO i≈üleme s√ºresi: {isleme_suresi:.1f}ms")
                
                # Sonucu geri g√∂nder
                try:
                    self.sonuc_queue.put_nowait({
                        'id': goruntu_data['id'],
                        'sonuc': sonuc,
                        'sure': isleme_suresi
                    })
                except queue.Full:
                    print("‚ö†Ô∏è [G√ñR√úNT√úƒ∞≈û] Sonu√ß kuyruƒüu dolu, eski sonu√ß atƒ±lƒ±yor")
                    try:
                        self.sonuc_queue.get_nowait()  # Eski sonucu at
                        self.sonuc_queue.put_nowait({
                            'id': goruntu_data['id'],
                            'sonuc': sonuc,
                            'sure': isleme_suresi
                        })
                    except:
                        pass
                        
            except Exception as e:
                print(f"‚ùå [G√ñR√úNT√úƒ∞≈û] Worker hatasƒ±: {e}")
                
        print("üõë [G√ñR√úNT√úƒ∞≈û] ƒ∞≈üleme worker durdu")
    
    def _senkron_isle(self, kare) -> GoruntuSonuc:
        """Senkron YOLO i≈üleme (fallback)"""
        print("üîÑ [G√ñR√úNT√úƒ∞≈û] Senkron i≈üleme")
        return self._yolo_isle(kare)
    
    def _yolo_isle(self, kare) -> GoruntuSonuc:
        """YOLO ile g√∂r√ºnt√º i≈üleme (asenkron/senkron ortak)"""
        try:
            # YOLO ile nesne tespiti
            sonuclar = self.model.predict(
                source=kare,
                device=self.cihaz,
                save=False,
                conf=0.75,  # G√ºven e≈üiƒüi
                iou=0.5,    # IoU e≈üiƒüi
                verbose=False,
                stream=False
            )
            
            # Tespit edilen nesneleri i≈üle
            tespit_edilen_nesneler = []
            
            for sonuc in sonuclar:
                if sonuc.boxes is None:
                    continue
                    
                kutular = sonuc.boxes.xyxy.cpu().numpy().astype(int)
                siniflar = sonuc.boxes.cls.cpu().numpy().astype(int)
                guven_skorlari = sonuc.boxes.conf.cpu().numpy()
                
                for kutu, sinif_id, guven in zip(kutular, siniflar, guven_skorlari):
                    x1, y1, x2, y2 = kutu
                    etiket = self.model.names[sinif_id]
                    
                    # Boyutlarƒ± mm'ye √ßevir
                    genislik_mm = (x2 - x1) * self.x_olcek
                    yukseklik_mm = (y2 - y1) * self.y_olcek
                    
                    # Malzeme t√ºr√ºn√º belirle
                    malzeme_turu = self._etiket_to_malzeme(etiket)
                    
                    tespit_edilen_nesneler.append({
                        "tur": malzeme_turu,
                        "guven": round(guven, 3),
                        "genislik_mm": round(genislik_mm, 2),
                        "yukseklik_mm": round(yukseklik_mm, 2),
                        "etiket": etiket
                    })
                    
                    print(f"üì¶ [TESPIT] {etiket} ‚Üí {malzeme_turu.name} | "
                          f"G√ºven: {guven:.3f} | "
                          f"Boyut: {genislik_mm:.1f}x{yukseklik_mm:.1f}mm")
            
            # Sonu√ß d√∂nd√ºr
            if not tespit_edilen_nesneler:
                print("‚ùå [G√ñR√úNT√úƒ∞≈û] Hi√ß nesne tespit edilmedi")
                return GoruntuSonuc(
                    genislik_mm=0,
                    yukseklik_mm=0,
                    tur=MalzemeTuru.BILINMEYEN,
                    guven_skoru=0,
                    mesaj="nesne_yok"
                )
            
            # En y√ºksek g√ºven skoruna sahip nesneyi al
            en_iyi_nesne = max(tespit_edilen_nesneler, key=lambda x: x["guven"])
            
            return GoruntuSonuc(
                genislik_mm=en_iyi_nesne["genislik_mm"],
                yukseklik_mm=en_iyi_nesne["yukseklik_mm"],
                tur=en_iyi_nesne["tur"],
                guven_skoru=en_iyi_nesne["guven"],
                mesaj="nesne_var"
            )
            
        except Exception as e:
            print(f"‚ùå [G√ñR√úNT√úƒ∞≈û] YOLO hatasƒ±: {e}")
            return self._hata_sonucu("yolo_hatasi")
    
    def _hata_sonucu(self, hata_tipi: str) -> GoruntuSonuc:
        """Hata durumunda standart sonu√ß d√∂nd√ºr√ºr"""
        return GoruntuSonuc(
            genislik_mm=0,
            yukseklik_mm=0,
            tur=MalzemeTuru.BILINMEYEN,
            guven_skoru=0,
            mesaj=hata_tipi
        )
    
    def _etiket_to_malzeme(self, etiket: str) -> MalzemeTuru:
        """
        YOLO etiketini malzeme t√ºr√ºne √ßevirir
        
        Args:
            etiket: YOLO'dan gelen etiket
            
        Returns:
            MalzemeTuru: E≈üle≈üen malzeme t√ºr√º
        """
        etiket_kucuk = etiket.lower()
        malzeme = self.etiket_eslemesi.get(etiket_kucuk, MalzemeTuru.BILINMEYEN)
        
        if malzeme == MalzemeTuru.BILINMEYEN:
            print(f"‚ö†Ô∏è [G√ñR√úNT√úƒ∞≈û] Bilinmeyen YOLO etiketi: {etiket}")
            
        return malzeme
    
    def servisi_kapat(self):
        """Servisi temiz ≈üekilde kapat"""
        try:
            # Asenkron thread'i durdur
            if self.islem_thread_aktif:
                self.islem_thread_aktif = False
                if self.islem_thread and self.islem_thread.is_alive():
                    self.islem_thread.join(timeout=2.0)
                    
            # Kamerayƒ± kapat
            if hasattr(self, 'kamera') and self.kamera:
                self.kamera.durdur()
                
            print("‚úÖ [G√ñR√úNT√úƒ∞≈û] Servis kapatƒ±ldƒ±")
        except Exception as e:
            print(f"‚ö†Ô∏è [G√ñR√úNT√úƒ∞≈û] Kapatma hatasƒ±: {e}")
    
    def __del__(self):
        """Destructor - otomatik temizlik"""
        self.servisi_kapat()